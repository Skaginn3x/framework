name: gcc

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: 'build and run tests'
    runs-on: ubuntu-latest
    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsystemd-dev doxygen python3-sphinx python3-sphinx-rtd-theme python3-breathe graphviz cppcheck python3-myst-parser

      - uses: actions/checkout@v3

      - name: commissioning
        run: |
          sudo ./scripts/commissioning.sh
          sudo chown $USER:$USER -R /var/tfc  # todo fix this differently
          sudo chown $USER:$USER -R /run/tfc
        #with:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # Restore from cache the previously built ports. If a "cache miss" occurs,
      # then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on
      # to install the packages when `run-cmake` runs, no packages are installed at
      # this time.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10
        with:
          # This is the default location of the directory containing vcpkg sources.
          # Change it to the right location if needed.
          vcpkgDirectory: '/opt/vcpkg'

          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          vcpkgGitCommitId: 'a7b6122f6b6504d16d96117336a0562693579933'

          # This is the glob expression used to locate the vcpkg.json and add its
          # hash to the cache key. Change it to match a single manifest file you want
          # to use.
          # Note: do not use `${{ github.context }}` to compose the value as it
          # contains backslashes that would be misinterpreted. Instead
          # compose a value relative to the root of the repository using
          # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
          vcpkgJsonGlob: '${{ github.workspace }}/vcpkg.json'

          # This is needed to run `vcpkg install` command (after vcpkg is built) in
          # the directory where vcpkg.json has been located. Default is false,
          # It is highly suggested to let `run-cmake` to run vcpkg (i.e. `false`)
          # (i.e. let CMake run `vcpkg install`) using the vcpkg.cmake toolchain.
        # runVcpkgInstall: true

      # The following `run` step is useful to prevent storing partial cache in the GH cache
      # service.
      # This is useful when vcpkg is not run at `run-vcpkg`'s runtime, but later when CMake
      # is running, e.g. at `run-cmake` runtime.
      # Driving the environment variable `RUNVCPKG_NO_CACHE`, at the end of the workflow the
      # `run-vcpkg` post step is instructed to not save anything when the workflow has been
      # cancelled or it has failed.
      #- run: |
      #    echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
      #  if: ${{ failure() || cancelled() }}
      #  shell: bash

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          # This is the default path to the CMakeLists.txt along side the
          # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
          # located elsewhere.
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'

          # This is the name of the CMakePresets.json's configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: 'ci-gcc-debug'

          # This is the name of the CMakePresets.json's configuration to build the project.
          buildPreset: 'build-ci-gcc-debug'
          testPreset: 'test-ci-gcc-debug'

#      - name: Run static analysis
#        uses: JacobDomagala/StaticAnalysis@master
#        with:
#          use_cmake: true
#
#          # (Optional) clang-tidy args
#          clang_tidy_args: -checks='*,fuchsia-*,google-*,zircon-*,abseil-*,modernize-use-trailing-return-type'
#
#          # (Optional) cppcheck args
#          cppcheck_args: --enable=all --suppress=missingInclude