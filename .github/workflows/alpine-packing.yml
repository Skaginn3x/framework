name: alpine static

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_static_artifacts:
    runs-on: ubuntu-22.04
    name: Build static artifacts
    strategy:
      fail-fast: false
      matrix:
        build_type: [ debug, release ]
    steps:
      - uses: actions/checkout@v3
      - uses: jirutka/setup-alpine@v1
        id: alpine
        name: Alpine maker
        with:
          branch: v3.17
          packages: >
            g++ curl zip unzip tar build-base musl python3 cmake make linux-headers openssl-dev git rpm-dev
            doxygen py3-sphinx py3-breathe py3-myst-parser py3-sphinx_rtd_theme graphviz
      - name: Get new cmake
        run: |
          apk upgrade cmake --repository=https://dl-cdn.alpinelinux.org/alpine/edge/main/
        shell: alpine.sh --root {0}

      - name: Build ninja
        run: |
          VERSION=1.11.1
          curl -L https://github.com/ninja-build/ninja/archive/v$VERSION.tar.gz | tar xzf -
          cd ninja-$VERSION
          cmake -B build-cmake -S .
          cmake --build build-cmake
          cmake --install build-cmake
          cd ..
          rm -rf ninja-$VERSION
        shell: alpine.sh --root {0}

      - name: Hacking alpine virtual env
        run: | 
          ln -s /bin/sh /usr/bin/sh
          ln -s /usr/bin/cmake /usr/local/bin/cmake
        shell: alpine.sh --root {0}

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v11
        with:
          useShell: ${{ steps.alpine.outputs.root-path }}/abin/alpine.sh
#          vcpkgDirectory: '${{ steps.alpine.outputs.root-path }}/opt/vcpkg'
          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          vcpkgGitCommitId: '19af97cba8ca48474e4ad15a24ed50271a9ecdac'
          vcpkgJsonGlob: 'vcpkg.json'

      # todo would be nice to use lukka/run-cmake but rpm needs root for some reason when packaging
      - name: Pack it
        run: |
          cmake --workflow --preset packflow-gcc-${{matrix.build_type}}-static
        shell: alpine.sh --root {0}

      - name: Upload debian package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-gcc-${{matrix.build_type}}-static/*.deb
      - name: Upload rpm package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-gcc-${{matrix.build_type}}-static/*.rpm
      - name: Upload tar package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-gcc-${{matrix.build_type}}-static/*.tar.gz
