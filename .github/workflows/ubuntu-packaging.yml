name: ubuntu packaging

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/ubuntu-packaging.yml'
      - 'cmake'
  release:
    types: [ "created" ]
  workflow_dispatch:

env:
  CONFIGURATION_DIRECTORY: ${{ github.workspace }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ubuntu packaging
    runs-on: ubuntu-latest
    container: ghcr.io/skaginn3x/skaginn3x/framework/tfc-toolchain:latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [debug, release]
        architecture: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '/opt/vcpkg'
          vcpkgGitCommitId: '66a252f70eebdd744c02d7ab8c1cc6fe123c70ee'
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10.3
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          workflowPreset: '${{ matrix.architecture }}-gcc-${{matrix.build_type}}'

      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: /opt/vcpkg/**/*out.log

      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: /opt/vcpkg/**/*err.log

      - name: Test install
        if: matrix.architecture == 'x86_64'
        run: |
          apt-get update
          apt-get install -y ./build/pack-gcc-${{matrix.build_type}}/*.deb

      - id: find-location
        name: Find location
        shell: bash
        run: |
          echo "tar-location=$(ls build/*/*.tar.gz)" >> "$GITHUB_OUTPUT"
          echo "deb-location=$(ls build/*/*.deb)" >> "$GITHUB_OUTPUT"
          echo "rpm-location=$(ls build/*/*.rpm)" >> "$GITHUB_OUTPUT"
  upload:
    name: deploy artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: yogeshlonkar/wait-for-jobs@v0
        with:
          jobs: 'ubuntu packaging'
      - name: Upload debian package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.deb
          retention-days: 1

      - name: Upload Release deb file
        if: github.event_name == 'release' && github.event.action == 'created'
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.find-location.outputs.deb-location }}
          asset_name: tfc-framework-${{matrix.build_type}}-${{matrix.architecture}}.deb
          asset_content_type: application/x-tar

      - name: Upload rpm package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.rpm
          retention-days: 1


      - name: Upload Release rpm file
        if: github.event_name == 'release' && github.event.action == 'created'
        id: upload-release-asset-rpm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.find-location.outputs.rpm-location }}
          asset_name: tfc-framework-${{matrix.build_type}}-${{matrix.architecture}}.rpm
          asset_content_type: application/x-cpio

      - name: Upload tar package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.tar.gz
          retention-days: 1

      - name: Upload Release tar file
        if: github.event_name == 'release' && github.event.action == 'created'
        id: upload-release-asset-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ steps.find-location.outputs.tar-location }}
          asset_name: tfc-framework-${{matrix.build_type}}-${{matrix.architecture}}.tar.gz
          asset_content_type: application/x-tar

      - name: Make debug symbols tar
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.build_type == 'release'
        run: |
          cd build
          tar -czf tfc-framework-${{matrix.architecture}}-debug-symbols.tar.gz */*/*.sym

      - name: Upload debug symbols
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.build_type == 'release'
        id: upload-release-symbols-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: build/tfc-framework-${{matrix.architecture}}-debug-symbols.tar.gz
          asset_name: tfc-framework-${{matrix.architecture}}-debug-symbols.tar.gz
          asset_content_type: application/x-tar

      # Upload non debug packages to cloudsmith
      - name: Cloudsmith upload
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.build_type == 'release'
        id: push
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'deb'
          owner: 'skaginn3x'             # Your Cloudsmith account name or org name (namespace)
          repo: 'tfc-repo'         # Your Cloudsmith Repository name (slug)
          distro: 'otherdeb'     # Your Distribution  (i.e Debian, Ubuntu)
          release: 'any-version'         # Your Distribution Release (i.e xenial, buster)
          republish: 'true'          # needed ONLY if version is not changing
          file: 'build/*/*.deb'  # debian package filename

  build-tfc-runtime-docker:
    name: build tfc runtime docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}
      IMAGE_NAME: tfc-runtime

    steps:
      - uses: yogeshlonkar/wait-for-jobs@v0
        with:
          jobs: 'deploy artifacts'
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push tfc-runtime
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./containers/tfc-runtime
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./containers/tfc-runtime/tfc-runtime.dockerfile

      - name: Build and push tfc-dart-sdk
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./containers/tfc-dart-sdk
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./containers/tfc-dart-sdk/tfc-dart-sdk.dockerfile
