name: ubuntu packaging

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [ "created" ]

env:
  CONFIGURATION_DIRECTORY: ${{ github.workspace }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ubuntu packaging
    runs-on: ubuntu-22.04
    container: ghcr.io/skaginn3x/skaginn3x/framework/tfc-toolchain:sha-f8ab815
    strategy:
      fail-fast: false
      matrix:
        build_type: [debug, release]
        architecture: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v3

      - name: Get release
        if: github.event_name == 'release' && github.event.action == 'created'
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '/opt/vcpkg'
          vcpkgGitCommitId: 'be2d7f886aad895e282b59088a2dfca5f6e1c88a'
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10.3
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          workflowPreset: 'packflow-${{ matrix.architecture }}-gcc-${{matrix.build_type}}'

      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: /opt/vcpkg/**/*out.log

      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: /opt/vcpkg/**/*err.log

      - name: Test install
        if: matrix.architecture == 'x86_64'
        run: |
          apt-get update
          apt-get install -y ./build/pack-gcc-${{matrix.build_type}}/*.deb

      - name: Upload debian package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.deb

      - name: Upload rpm package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.rpm

      - name: Upload tar package
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}
          path: build/pack-*/*.tar.gz
      - id: find-location
        name: Find tar locaion
        shell: bash
        run: |
          echo "tar-location=$(ls build/pack-*/*.tar.gz)" >> "$GITHUB_OUTPUT"

      - name: Upload Release tar file
        if: github.event_name == 'release' && github.event.action == 'created'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.find-location.outputs.tar-location }}
          asset_path: ./build/pack-gcc-${{matrix.build_type}}/*.tar.gz
          asset_name: tfc-framework-${{matrix.build_type}}-${{matrix.architecture}}.tar.gz
          asset_content_type: application/x-tar

      # Upload non debug packages to cloudsmith
      - name: Cloudsmith upload
        if: github.event_name == 'release' && github.event.action == 'created' && matrix.build_type == 'release'
        id: push
        uses: cloudsmith-io/action@master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'deb'
          owner: 'skaginn3x'             # Your Cloudsmith account name or org name (namespace)
          repo: 'tfc-repo'         # Your Cloudsmith Repository name (slug)
          distro: 'otherdeb'     # Your Distribution  (i.e Debian, Ubuntu)
          release: 'any-version'         # Your Distribution Release (i.e xenial, buster)
          republish: 'true'          # needed ONLY if version is not changing
          file: 'build/*/*.deb'  # debian package filename