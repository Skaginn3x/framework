name: static packaging

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_static_artifacts:
    runs-on: ubuntu-${{ matrix.ubuntu_version }}.04
    name: static packaging
    strategy:
      fail-fast: false
      matrix:
        ubuntu_version: [20, 22]
        build_type: [ debug, release ]
        architecture: [ x86_64, aarch64 ]
        exclude:
          - ubuntu_version: 20
            architecture: aarch64
    steps:
      - uses: actions/checkout@v3
      - uses: jirutka/setup-alpine@v1
        id: alpine
        name: Alpine maker
        with:
          arch: ${{ matrix.architecture }}
          branch: v3.17
          packages: >
            g++ curl zip unzip tar build-base musl python3 cmake make linux-headers openssl-dev git rpm-dev autoconf-archive bash automake autoconf libtool
            doxygen py3-sphinx py3-breathe py3-myst-parser py3-sphinx_rtd_theme graphviz
      - name: Get new cmake
        run: |
          apk upgrade cmake --repository=https://dl-cdn.alpinelinux.org/alpine/edge/main/
          apk upgrade autoconf-archive --repository=https://dl-cdn.alpinelinux.org/alpine/edge/main/
        shell: alpine.sh --root {0}

      - name: Cache Ninja
        if: matrix.architecture == 'x86_64'
        id: cache-ninja-x86_64
        uses: actions/cache@v3
        with:
          path: build-ninja-${{ matrix.architecture }}
          key: ninja-1.11.1

      - name: Cache Ninja
        if: matrix.architecture == 'aarch64'
        id: cache-ninja-aarch64
        uses: actions/cache@v3
        with:
          path: build-ninja-${{ matrix.architecture }}
          key: ninja-1.11.1

      - name: Build ninja
        run: |
          VERSION=1.11.1
          curl -L https://github.com/ninja-build/ninja/archive/v$VERSION.tar.gz | tar xzf -
          cmake -B build-ninja-${{ matrix.architecture }} -S ninja-$VERSION -DBUILD_TESTING=OFF
          cmake --build build-ninja-${{ matrix.architecture }}
        shell: alpine.sh {0}
        if: steps.cache-ninja-${{ matrix.architecture }}.outputs.cache-hit != 'true'

      - name: Install ninja
        run: |
          cmake --install build-ninja-${{ matrix.architecture }}
        shell: alpine.sh --root {0}

      - name: Hacking alpine chroot
        run: | 
          ln -s /bin/sh /usr/bin/sh
          ln -s /usr/bin/cmake /usr/local/bin/cmake
        shell: alpine.sh --root {0}

      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v11
        with:
          useShell: ${{ steps.alpine.outputs.root-path }}/abin/alpine.sh
#          vcpkgDirectory: '${{ steps.alpine.outputs.root-path }}/opt/vcpkg'
          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          vcpkgGitCommitId: '19af97cba8ca48474e4ad15a24ed50271a9ecdac'
          vcpkgJsonGlob: 'vcpkg.json'

#      - name: Pack it v2
#        uses: lukka/run-cmake@v10.3
#        with:
#          useShell: ${{ steps.alpine.outputs.root-path }}/abin/alpine.sh
#
#          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
#          workflowPreset: 'packflow-gcc-${{matrix.build_type}}-static'

      # todo would be nice to use lukka/run-cmake but rpm needs root for some reason when packaging
      - name: Pack it
        run: |
          cmake --workflow --preset packflow-gcc-${{matrix.build_type}}-static
        shell: alpine.sh --root {0}
        if: matrix.architecture == 'x86_64'

      - name: Pack it
        run: |
          cmake --workflow --preset packflow-aarch64-gcc-${{matrix.build_type}}-static
        shell: alpine.sh --root {0}
        if: matrix.architecture == 'aarch64'

      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: ${{ github.workspace }}/vcpkg/**/*out.log
      - name: Upload vcpkg log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: vcpkg-build-fail-logs
          path: ${{ github.workspace }}/vcpkg/**/*err.log

      - name: Test install
        if: matrix.architecture == 'x86_64'
        run: |
          sudo apt-get install ./build/pack-gcc-${{matrix.build_type}}-static/*.deb

      - name: Upload debian package
        if: matrix.ubuntu_version == 22
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}-static
          path: build/pack-*-static/*.deb
      - name: Upload rpm package
        if: matrix.ubuntu_version == 22
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}-static
          path: build/pack-*-static/*.rpm
      - name: Upload tar package
        if: matrix.ubuntu_version == 22
        uses: actions/upload-artifact@v3
        with:
          name: tfc-framework-${{matrix.build_type}}-static
          path: build/pack-*-static/*.tar.gz
