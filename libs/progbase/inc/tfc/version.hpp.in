#pragma once

#include <string_view>

namespace tfc::base{
class version {
public:
    explicit version() = default;
    version(version const&) = default;
    version(version&&) = default;
    auto operator=(version const&) -> version& = default;
    auto operator=(version&&) -> version& = default;
    virtual ~version();
    virtual constexpr auto get_git_hash() const noexcept -> std::string_view { return git_hash; }
    virtual constexpr auto get_git_tag() const noexcept -> std::string_view { return git_tag; }
    virtual constexpr auto get_git_branch() const noexcept -> std::string_view { return git_branch; }
    virtual constexpr auto get_git_author() const noexcept -> std::string_view { return git_author; }
    virtual constexpr auto get_git_is_dirty() const noexcept -> std::string_view { return git_is_dirty; }
    virtual constexpr auto get_git_commit_date() const noexcept -> std::string_view { return git_commit_date; }
    virtual constexpr auto get_build_date() const noexcept -> std::string_view { return build_date; }
private:
    static constexpr std::string_view git_hash = "@GIT_HASH@";
    static constexpr std::string_view git_tag = "@GIT_TAG@";
    static constexpr std::string_view git_branch = "@GIT_BRANCH@";
    static constexpr std::string_view git_author = @GIT_AUTHOR@;
    static constexpr std::string_view git_is_dirty = "@GIT_IS_DIRTY@";
    static constexpr std::string_view git_commit_date = "@GIT_COMMIT_DATE@";
    static constexpr std::string_view build_date = @BUILD_DATE@;
};
}
