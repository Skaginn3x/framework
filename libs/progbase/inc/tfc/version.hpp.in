#pragma once

#include <string_view>
#include <tfc/stx/string_view_join.hpp>

namespace tfc::base{
struct version {
  static constexpr std::string_view git_repo = "@GIT_REPO@";
  static constexpr std::string_view git_hash = "@GIT_HASH@";
  static constexpr std::string_view git_tag = "@GIT_TAG@";
  static constexpr std::string_view git_branch = "@GIT_BRANCH@";
  static constexpr std::string_view git_author = @GIT_AUTHOR@;
  static constexpr std::string_view git_is_dirty = "@GIT_IS_DIRTY@";
  static constexpr std::string_view git_commit_date = "@GIT_COMMIT_DATE@";
  static constexpr std::string_view build_date = @BUILD_DATE@;

  /// \brief Returns a string with version information
  /// example:
  /// TFC - https://github.com/skaginn3x/framework
  /// Build date: 2024-46-29 09:46:27
  /// Commit date: 2024-01-29
  /// Branch: support-extra-version-info
  /// Hash: 1b10352c523b7dda07a9867260945e21f7f0c980
  /// Tag: 2023.11.1-110-g1b10 - dirty
  static constexpr std::string_view make_version_string() noexcept {
    static constexpr auto git_info{
    // clang-format off
      stx::string_view_join_v<
        git_repo, newline,
        build_date_str, build_date, newline,
        commit_date_str, git_commit_date, newline,
        branch_str, git_branch, newline,
        hash_str, git_hash, newline,
        tag_str, git_tag
      >
    // clang-format on
    };
    if constexpr (git_is_dirty.empty()) {
      return git_info;
    } else {
      return stx::string_view_join_v<git_info, space_dash_space, git_is_dirty>;
    }
  }
private:
  static constexpr std::string_view hash_str{ "Hash: " };
  static constexpr std::string_view tag_str{ "Tag: " };
  static constexpr std::string_view branch_str{ "Branch: " };
  static constexpr std::string_view author_str{ "Author: " };
  static constexpr std::string_view is_dirty_str{ "Is dirty: " };
  static constexpr std::string_view commit_date_str{ "Commit date: " };
  static constexpr std::string_view build_date_str{ "Build date: " };
  static constexpr std::string_view newline{ "\n" };
  static constexpr std::string_view space_dash_space{ " - " };
};
}  // namespace tfc::base
